---
- name: Cloudblock - amd64 azure variant
  hosts: localhost
  collections:
    - azure.azcollection
  gather_facts: true
  become: true
  tasks:

    - name: Custom facts
      ansible.builtin.set_fact:
        url_from_doh_provider:
          adguard: https://dns.adguard.com/dns-query
          cloudflare: https://cloudflare-dns.com/dns-query
          cloudflare-security: https://security.cloudflare-dns.com/dns-query
          cloudflare-family: https://family.cloudflare-dns.com/dns-query
          applied-privacy: https://doh.applied-privacy.net/query
          google: https://dns.google/dns-query
          hurricane-electric: https://ordns.he.net/dns-query
          pi-dns: https://doh.pi-dns.com/dns-query
          quad9-recommended: https://dns.quad9.net/dns-query
          libre-dns: https://doh.libredns.gr/dns-query
          opendns: https://doh.opendns.com/dns-query

    - name: Docker apt key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0640'

    - name: Dpkg Architecture
      ansible.builtin.shell: |
        dpkg --print-architecture
      register: dpkg_arch

    - name: Docker apt repo
      ansible.builtin.apt_repository:
        repo: >
          deb [arch={{ dpkg_arch.stdout }} signed-by=/etc/apt/keyrings/docker.asc]
          https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Absent packages
      ansible.builtin.apt:
        pkg:
          - containerd
          - docker-compose
          - docker-doc
          - docker.io
          - podman-docker
          - runc
        state: absent

    - name: Required packages
      ansible.builtin.apt:
        pkg:
          - ca-certificates
          - containerd.io
          - curl
          - docker-buildx-plugin
          - docker-ce
          - docker-ce-cli
          - docker-compose-plugin
          - gnupg
          - libcap2-bin
          - python3-pip
          - ssl-cert
        state: present
        update_cache: true

    - name: Docker python packages
      ansible.builtin.pip:
        name:
          - docker
        executable: /usr/bin/pip3
        state: present

    - name: IP Forwarding enable/persist
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: true
        sysctl_set: true
        sysctl_file: /etc/sysctl.conf

    - name: Docker service started/enabled
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    - name: Various container directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "999"
        group: "999"
        mode: '0750'
      with_items:
        - /opt/cloudflared
        - /opt/pihole
        - /opt/pihole/etc
        - /opt/pihole/dnsmasq.d
        - /opt/webproxy
        - /opt/wireguard

    - name: Secure proxy to pihole confs
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "/opt/webproxy/{{ item }}"
        owner: root
        group: root
        mode: '0444'
      with_items:
        - httpd-ssl.conf
        - httpd.conf

    - name: Get ph_password from Azure Vault Secret
      azure_rm_keyvaultsecret_info:
        auth_source: msi
        vault_uri: "https://{{ ph_prefix }}-secret-{{ ph_suffix }}.vault.azure.net"
        name: "{{ ph_prefix }}-secret"
        version: "current"
      register: ph_password

    - name: Download wireguard backup from Azure storage if exists
      azure_rm_storageblob:
        auth_source: msi
        resource_group: "{{ ph_prefix }}-resourcegroup"
        storage_account_name: "{{ ph_prefix }}store{{ ph_suffix }}"
        container: "{{ ph_prefix }}-storage-container"
        dest: "/opt/wireguard_backup.tar.gz"
        blob: "wireguard/wireguard_backup.tar.gz"
      ignore_errors: true

    - name: Determine wireguard state
      ansible.builtin.stat:
        path: /opt/wireguard/server
      register: wireguard_state

    - name: Unarchive wireguard backup if local not exists
      ansible.builtin.unarchive:
        src: /opt/wireguard_backup.tar.gz
        dest: /opt/
        remote_src: true
        owner: '1000'
      when: not wireguard_state.stat.exists
      ignore_errors: true

    - name: Download pihole backup from Azure storage if exists
      azure_rm_storageblob:
        auth_source: msi
        resource_group: "{{ ph_prefix }}-resourcegroup"
        storage_account_name: "{{ ph_prefix }}store{{ ph_suffix }}"
        container: "{{ ph_prefix }}-storage-container"
        dest: "/opt/pihole_backup.tar.gz"
        blob: "pihole/pihole_backup.tar.gz"
      ignore_errors: true

    - name: Determine pihole directory state
      ansible.builtin.stat:
        path: /opt/pihole/etc/pihole-FTL.db
      register: pihole_state

    - name: Unarchive pihole backup if local not exists
      ansible.builtin.unarchive:
        src: /opt/pihole_backup.tar.gz
        dest: /opt/
        remote_src: true
        owner: '1000'
      when: not pihole_state.stat.exists
      ignore_errors: true

    - name: Cloudflared Dockerfile
      ansible.builtin.blockinfile:
        create: true
        mode: '0644'
        path: /opt/cloudflared/Dockerfile
        block: |
          FROM ubuntu:22.04
          EXPOSE 53/tcp
          EXPOSE 53/udp
          RUN apt-get update && \
              apt-get install -y wget && \
              wget https://github.com/cloudflare/cloudflared/releases/download/2023.6.1/cloudflared-linux-amd64 --directory-prefix=/usr/local/bin/ && \
              chmod 555 /usr/local/bin/cloudflared-linux-amd64
          ENTRYPOINT ["/usr/local/bin/cloudflared-linux-amd64", "proxy-dns","--address", "{{ docker_doh }}", "--port", "53", "--upstream", "{{ url_from_doh_provider[doh_provider] }}"]
      register: cloudflared_doh_dockerfile

    - name: Check cloudflared image exists
      community.docker.docker_image:
        name: cloudflared_doh
        state: present
        source: local
      register: cloudflared_image_check
      ignore_errors: true

    - name: Cloudflared image
      community.docker.docker_image:
        name: cloudflared_doh
        build:
          path: /opt/cloudflared
        source: build
        state: present
        force_source: "{{ cloudflared_doh_dockerfile.changed or cloudflared_image_check.failed }}"

# cloud + vpn = mtu restrictions that cause failures for sites like google.com or the play store
# a lower mtu fixes the problem
    - name: Cloudflared pihole and wireguard network
      community.docker.docker_network:
        name: cloudblock
        driver: bridge
        driver_options:
          com.docker.network.driver.mtu: 1500
        ipam_config:
          - subnet: "{{ docker_network }}/24"
            gateway: "{{ docker_gw }}"

    - name: Cloudflared_doh container
      community.docker.docker_container:
        name: cloudflared_doh
        image: cloudflared_doh
        networks:
          - name: cloudblock
            ipv4_address: "{{ docker_doh }}"
        restart_policy: "always"

    - name: Pihole container - without DNS listen
      community.docker.docker_container:
        name: pihole
        hostname: cloudblockpihole
        env:
          DNS1: "{{ docker_doh }}"
          DNS2: "{{ docker_doh }}"
          WEBPASSWORD: "{{ ph_password.secrets[0].secret }}"
        image: pihole/pihole:latest
        networks:
          - name: cloudblock
            ipv4_address: "{{ docker_pihole }}"
        volumes:
          - /opt/pihole/etc:/etc/pihole/:rw
          - /opt/pihole/dnsmasq.d:/etc/dnsmasq.d:rw
        pull: true
        restart_policy: "always"
      when: dns_novpn == "0"
      no_log: true

    - name: Pihole container - with DNS listen
      community.docker.docker_container:
        name: pihole
        hostname: cloudblockpihole
        env:
          DNS1: "{{ docker_doh }}"
          DNS2: "{{ docker_doh }}"
          WEBPASSWORD: "{{ ph_password.secrets[0].secret }}" 
          DNSMASQ_USER: root
        image: pihole/pihole:latest
        networks:
          - name: cloudblock
            ipv4_address: "{{ docker_pihole }}"
        ports:
          - "53:53"
          - "53:53/udp"
        volumes:
          - /opt/pihole/etc:/etc/pihole/:rw
          - /opt/pihole/dnsmasq.d:/etc/dnsmasq.d:rw
        pull: true
        restart_policy: "always"
      when: dns_novpn == "1"
      no_log: true

    - name: Wireguard container
      community.docker.docker_container:
        name: wireguard
        capabilities:
          - NET_ADMIN
          - SYS_MODULE
        env:
          PUID: "1000"
          PGID: "1000"
          TZ: "Etc/UTC"
          SERVERURL: "auto"
          SERVERPORT: "51820"
          ALLOWEDIPS: "{% if vpn_traffic is not defined %}{{ docker_pihole }}/32,{{ docker_webproxy }}/32{% elif vpn_traffic == 'dns' %}{{ docker_pihole }}/32,{{ docker_webproxy }}/32{% elif vpn_traffic == 'peers' %}{{ docker_pihole }}/32,{{ docker_webproxy }}/32,{{ wireguard_network }}/24{% elif vpn_traffic == 'all' %}0.0.0.0/0{% else %}{{ docker_pihole }}/32,{{ docker_webproxy }}/32{% endif %}"
          PEERS: "{{ wireguard_peers }}"
          PEERDNS: "{{ docker_pihole }}"
          INTERNAL_SUBNET: "{{ wireguard_network }}"
        image: linuxserver/wireguard:latest
        networks:
          - name: cloudblock
            ipv4_address: "{{ docker_wireguard }}"
        ports:
          - "51820:51820/udp"
        sysctls:
          net.ipv4.conf.all.src_valid_mark: 1
        volumes:
          - /opt/wireguard:/config:rw
        pull: true
        restart_policy: "always"

    - name: Web proxy container for pihole
      community.docker.docker_container:
        name: web_proxy
        image: httpd:2.4
        networks:
          - name: cloudblock
            ipv4_address: "{{ docker_webproxy }}"
        ports:
          - "443:443"
        volumes:
          - /opt/webproxy/httpd-ssl.conf:/usr/local/apache2/conf/extra/httpd-ssl.conf:ro
          - /opt/webproxy/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro
          - /etc/ssl/certs/ssl-cert-snakeoil.pem:/usr/local/apache2/conf/server.crt:ro
          - /etc/ssl/private/ssl-cert-snakeoil.key:/usr/local/apache2/conf/server.key:ro
        pull: true
        restart_policy: "always"

    - name: Set peer count list
      ansible.builtin.set_fact:
        peer_count: "{{ range(1, wireguard_peers | int + 1) | list }}"

    - name: Wait for final peer conf (Wireguard)
      ansible.builtin.wait_for:
        path: "/opt/wireguard/peer{{ wireguard_peers }}/{{ item }}"
        state: present
        timeout: 600
        sleep: 1
      with_items:
        - "publickey-peer{{ wireguard_peers }}"
        - "privatekey-peer{{ wireguard_peers }}"
        - "peer{{ wireguard_peers }}.conf"
        - "peer{{ wireguard_peers }}.png"

    - name: Upload peer confs (Wireguard) to Azure Storage - publickey
      azure_rm_storageblob:
        auth_source: msi
        resource_group: "{{ ph_prefix }}-resourcegroup"
        storage_account_name: "{{ ph_prefix }}store{{ ph_suffix }}"
        container: "{{ ph_prefix }}-storage-container"
        src: "/opt/wireguard/peer{{ item }}/publickey-peer{{ item }}"
        blob: "wireguard/peer{{ item }}/publickey-peer{{ item }}"
        content_type: 'text/plain'
      with_items:
        - "{{ peer_count }}"

    - name: Upload peer confs (Wireguard) to Azure Storage - privatekey
      azure_rm_storageblob:
        auth_source: msi
        resource_group: "{{ ph_prefix }}-resourcegroup"
        storage_account_name: "{{ ph_prefix }}store{{ ph_suffix }}"
        container: "{{ ph_prefix }}-storage-container"
        src: "/opt/wireguard/peer{{ item }}/privatekey-peer{{ item }}"
        blob: "wireguard/peer{{ item }}/privatekey-peer{{ item }}"
        content_type: 'text/plain'
      with_items:
        - "{{ peer_count }}"

    - name: Upload peer confs (Wireguard) to Azure Storage - conf
      azure_rm_storageblob:
        auth_source: msi
        resource_group: "{{ ph_prefix }}-resourcegroup"
        storage_account_name: "{{ ph_prefix }}store{{ ph_suffix }}"
        container: "{{ ph_prefix }}-storage-container"
        src: "/opt/wireguard/peer{{ item }}/peer{{ item }}.conf"
        blob: "wireguard/peer{{ item }}/peer{{ item }}.conf"
        content_type: 'text/plain'
      with_items:
        - "{{ peer_count }}"

    - name: Upload peer confs (Wireguard) to Azure Storage - conf
      azure_rm_storageblob:
        auth_source: msi
        resource_group: "{{ ph_prefix }}-resourcegroup"
        storage_account_name: "{{ ph_prefix }}store{{ ph_suffix }}"
        container: "{{ ph_prefix }}-storage-container"
        src: "/opt/wireguard/peer{{ item }}/peer{{ item }}.png"
        blob: "wireguard/peer{{ item }}/peer{{ item }}.png"
        content_type: 'image/png'
      with_items:
        - "{{ peer_count }}"

    - name: Archive Wireguard
      community.general.archive:
        path: /opt/wireguard
        dest: /opt/wireguard_backup.tar.gz
        format: gz
        owner: root
        group: root
        mode: '0640'

    - name: Upload Wireguard backup to Azure Storage
      azure_rm_storageblob:
        auth_source: msi
        resource_group: "{{ ph_prefix }}-resourcegroup"
        storage_account_name: "{{ ph_prefix }}store{{ ph_suffix }}"
        container: "{{ ph_prefix }}-storage-container"
        src: "/opt/wireguard_backup.tar.gz"
        blob: "wireguard/wireguard_backup.tar.gz"
        content_type: 'application/gzip'

    - name: Pihole to Backup Playbook Clear
      ansible.builtin.file:
        path: /opt/pihole-to-backup.yml
        state: absent

    - name: Pihole to Backup Playbook Set
      ansible.builtin.lineinfile:
        path: /opt/pihole-to-backup.yml
        create: true
        owner: root
        group: root
        mode: '0640'
        line: "{{ item }}"
      with_items:
        - "---"
        - "- name: pihole-backup.yml"
        - "  hosts: localhost"
        - "  gather_facts: false"
        - "  tasks:"
        - "  "
        - "    - name: Archive pihole locally"
        - "      community.general.archive:"
        - "        path: /opt/pihole"
        - "        dest: /opt/pihole_backup.tar.gz"
        - "        format: gz"
        - "        owner: root"
        - "        group: root"
        - "        mode: '0640'"
        - "   "
        - "    - name: upload pihole backup to azure storage"
        - "      azure_rm_storageblob:"
        - "        auth_source: msi"
        - "        resource_group: \"{{ ph_prefix }}-resourcegroup\""
        - "        storage_account_name: \"{{ ph_prefix }}store{{ ph_suffix }}\""
        - "        container: \"{{ ph_prefix }}-storage-container\""
        - "        src: \"/opt/pihole_backup.tar.gz\""
        - "        blob: \"pihole/pihole_backup.tar.gz\""
        - "        content_type: 'application/gzip'"

    - name: Pihole to backup timer
      ansible.builtin.blockinfile:
        path: /etc/systemd/system/pihole-to-backup.timer
        create: true
        owner: root
        group: root
        mode: '0644'
        block: |
          [Unit]
          Description=Archives and copies pihole to cloud storage
          [Timer]
          OnUnitActiveSec=12h
          Unit=pihole-to-backup.service
          [Install]
          WantedBy=multi-user.target

    - name: Pihole to s3 backup service
      ansible.builtin.blockinfile:
        path: /etc/systemd/system/pihole-to-backup.service
        create: true
        owner: root
        group: root
        mode: '0644'
        block: |
          [Unit]
          Description=Archives and copies pihole to backup
          After=network.target
          [Service]
          ExecStart=/usr/local/bin/ansible-playbook /opt/pihole-to-backup.yml
          Type=simple
          Restart=no
          [Install]
          WantedBy=multi-user.target

    - name: Pihole to backup systemd start/enable
      ansible.builtin.systemd:
        name: "pihole-to-backup.{{ item }}"
        daemon_reload: true
        state: started
        enabled: true
      with_items:
        - service
        - timer
